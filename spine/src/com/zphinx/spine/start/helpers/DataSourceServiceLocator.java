/**
 * DataSourceServiceLocator.java
 * @author David Ladapo (davidl@zphinx.com)
 * @version  1.0
 * 
 * Copyright &copy;Zphinx Software Solutions
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * THERE IS NO WARRANTY FOR THIS SOFTWARE, TO THE EXTENT PERMITTED BY
 * APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING. ZPHINX SOFTWARE SOLUTIONS 
 * AND/OR OTHER PARTIES WHO PROVIDE THIS SOFTWARE "AS IS" WITHOUT WARRANTY
 * OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
 * IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
 * ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 * IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 * WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
 * THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
 * GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
 * USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
 * DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
 * PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 * EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * For further information, please go to http://spine.zphinx.co.uk/
 *
 **/

package com.zphinx.spine.start.helpers;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import com.zphinx.spine.message.Messages;

/**
 * DataSourceServiceLocator serves as a service locator used to fetch datasources as defined in the initialization configuration file.
 * 
 * @author David Ladapo
 * @version $1.0
 *          <p>
 *          
 *          Copyright &copy;Zphinx Software Solutions
 *          </p>
 */
public class DataSourceServiceLocator {

    /**
     * The key by which the error generated by this class is known in the relevant properties file.
     */
    private static final String KEY_UNDEFINED = Messages.getString("dssl.error");

    /**
     * A placeholder for the word <code>true</code>
     */
    private static final String TRUE = "true";

    /**
     * A placeholder for the word <code>default</code>
     */
    private static final String DEFAULT = "default";

    /**
     * A placeholder for the word <code>dataSourceBuilder</code>
     */
    private static final String DATA_SOURCE_BUILDER = "dataSourceBuilder";

    /**
     * The DataSource instance
     */
    private static DataSource dataSource = null;

    /**
     * The map of DataSource instances
     */
    private static Map dataSourceMap = null;

    /**
     * The only instance of this object
     */
    private static DataSourceServiceLocator dssl = null;

    /**
     * Public Constructor :- creates the default map
     */
    private DataSourceServiceLocator() {
        dataSourceMap = Collections.synchronizedMap(new HashMap());
    }

    /**
     * Gets the only instance of this object
     * 
     * @return the only instance of this object
     */
    public static DataSourceServiceLocator getInstance() {
        if(dssl == null){
            dssl = new DataSourceServiceLocator();
        }
        return dssl;
    }

    /**
     * Gets the default dataSource
     * 
     * @return the dataSource
     */
    public DataSource getDataSource() {
        return dataSource;
    }

    /**
     * Gets the dataSource known by the specified key
     * 
     * @return the dataSource
     */
    public DataSource getDataSource(String key) {
        return (DataSource) dataSourceMap.get(key);
    }

    /**
     * Creates a dataSource using the specified map properties, the DataSourceBuilder and the associated key. It also has the effect of setting the default datasource to the newly created dataSource if it is non null
     * 
     * @param map A map containing the dataSource initialization properties
     * @param key The key by which this datasource is known to the system
     * @param sourceBuilder The DataSourceBuilder instance used in the creation process
     */
    public void createDataSource(String key, Map map, DataSourceBuilder sourceBuilder) {
        try{
            if(key == null || key.trim().length() == 0) throw new Throwable(KEY_UNDEFINED);
            String defaultKey = (String) map.get(DEFAULT);
            if(sourceBuilder != null){
                DataSource someSource = sourceBuilder.createDataSource(map);
                if(someSource != null){
                    if(defaultKey != null && (defaultKey).equalsIgnoreCase(TRUE)){
                        dataSource = someSource;
                    }
                    dataSourceMap.put(key, someSource);
                }
            }

        }
        catch (Throwable e){
            e.printStackTrace();
        }

    }

    /**
     * Creates a DataSourceBuilder using the map
     * 
     * @param map The map containing all the parameters needed to initiate a dataSource
     * @return The appropriate DataSourceBuilder
     */
    public DataSourceBuilder initiateBuilder(Map map) {
        DataSourceBuilder builder = null;
        String builderName = (String) map.get(DATA_SOURCE_BUILDER);
        try{
            builder = (DataSourceBuilder) Class.forName(builderName).newInstance();
        }
        catch (InstantiationException e){
            e.printStackTrace();
        }
        catch (IllegalAccessException e){

            e.printStackTrace();
        }
        catch (ClassNotFoundException e){

            e.printStackTrace();
        }
        return builder;
    }

    /**
     * Sets a default dataSource
     * 
     * @param dataSource2 The dataSource to set as default dataSource
     */
    public void setDataSource(DataSource dataSource2) {
        dataSourceMap.put(DEFAULT, dataSource2);
        dataSource = dataSource2;
    }
}
